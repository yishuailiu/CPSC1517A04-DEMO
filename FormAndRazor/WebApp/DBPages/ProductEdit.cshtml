@{
    /**/

    Page.Title = "Product Edit";
    Layout = "~/_Layout.cshtml";



    var pid = Request.QueryString["pid"];
    if (pid.IsEmpty())
    {
        Response.Redirect("ProductSearch.cshtml");
    }
    var productid = Request.Form["ProductID"];
    var productname = Request.Form["ProductName"];
    var supplierid = Request.Form["SupplierList"];
    var categoryid = Request.Form["CategoryList"];
    var quantityperunit = Request.Form["QuantityPerUnit"];
    var unitprice = Request.Form["UnitPrice"];
    var unitsinstock = Request.Form["UnitsInStock"];
    var unitsonorder = Request.Form["UnitsOnOrder"];
    var reorderlevel = Request.Form["ReorderLevel"];
    var discontinued = Request.Form["Discontinued"];
    //capture which button was pressed
    var thebutton = Request.Form["theButton"];

    if (IsPost)
    {
        //discontinued is a checkbox
        //the possible values from the check box is null (not checked) or "on" (checked)
        //the acceptable sql values for a bit are 0 and 1
        if (discontinued == null)
        {
            discontinued = "0";
        }
        else
        {
            discontinued = "1";
        }
    }
    else
    {
        productid = pid;
        discontinued = "0";
    }
    var db = Database.Open("NWDB");
    var supplierStatement = "SELECT SupplierID, CompanyName "
                       + "FROM Suppliers "
                       + "ORDER BY CompanyName";
    var querySuppliers = db.Query(supplierStatement);
    var categoryStatement = "SELECT CategoryID, CategoryName "
                       + "FROM Categories "
                       + "ORDER BY CategoryName";
    var queryCategories = db.Query(categoryStatement);
    var queryStatement = "SELECT ProductID, ProductName, SupplierID, CategoryID, QuantityPerUnit, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel, Discontinued "
                        + "FROM Products "
                        + "WHERE ProductID = @0";
    var queryProducts = db.QuerySingle(queryStatement, pid);
}



@section banner{
    <h1>Product Edit - Update and Delete</h1>
}
@if (IsPost)
{
    if (thebutton.Equals("cancel"))
    {
        //a) could redirect the user to the search page
        //b) reset the data to the current record on the database
        //c) empty the data fields
        // you should in all casses black out the primary key field
        productid = "";
        <p class="col-sm-12 text-center">
            <span style="color:cadetblue">
                <strong>
                    Action cancelled. Look up another product on the <a href="~/DBPages/ProductSearch.cshtml">search page</a>.
                </strong>
            </span>
        </p>
    }
    else if (thebutton.Equals("delete"))
    {
        //check to see if there is a primary key to work with
        if (productid == "")
        {
            <p class="col-sm-12 text-center">
                <span style="color:red">
                    <strong>
                        Look up another one <a href="~/DBPages/ProductSearch.cshtml">search page</a>.
                    </strong>
                </span>
            </p>
        }
        else
        {
            try
            {
                var deletecommand = "DELETE Products WHERE ProductID = @0";
                var rowsaffected = db.Execute(deletecommand, productid);
                if (rowsaffected == 0)
                {
                    <p><span style="color:firebrick">Product not found, not removed.Look up another on <a href="~/DBPages/ProductSearch.cshtml">search page</a>.</span></p>
                    productid = "";
                    //optionally you could delete the data from the rest of the fields.
                }
                else
                {
                    <p><span style="color:firebrick">Product  removed.Look up another on <a href="~/DBPages/ProductSearch.cshtml">search page</a>.</span></p>
                }
            }
            catch (Exception ex)
            {

                <p><span style="color:firebrick">@ex.Message</span></p>
                productid = "";
            }
        }
    }
    else
    {
        if (productid == "")
        {
            <p class="col-sm-12 text-center">
                <span style="color:red">
                    <strong>
                        Look up another one <a href="~/DBPages/ProductSearch.cshtml">search page</a>.
                    </strong>
                </span>
            </p>
        }
        else
        {
            try
            {
                var updatecommand = "UPDATE Products SET " +
                                    "ProductName = @0, "+
                                    "SupplierID = @1, " +
                                    "CategoryID = @2, " +
                                    "QuantityPerUnit = @3, " +
                                    "UnitPrice = @4, " +
                                    "UnitsInStock = @5, " +
                                    "UnitsOnOrder = @6, " +
                                    "ReorderLevel = @7, " +
                                    "Discontinued = @8, " +
                                    "WHERE ProductID = @9";
                var rowsaffected = db.Execute(updatecommand, productname, supplierid.Equals("0") ? null : supplierid,
                categoryid.Equals("0") ? null : categoryid,
                string.IsNullOrEmpty(quantityperunit) ? null : quantityperunit,
                string.IsNullOrEmpty(unitprice) ? null : unitprice,
                string.IsNullOrEmpty(unitsinstock) ? null : unitsinstock,
                string.IsNullOrEmpty(unitsonorder) ? null : unitsonorder,
                string.IsNullOrEmpty(reorderlevel) ? null : reorderlevel,
                discontinued,productid);
                if (rowsaffected == 0)
                {
                    <p><span style="color:firebrick">Product not found, not updated.Look up another on <a href="~/DBPages/ProductSearch.cshtml">search page</a>.</span></p>
                    productid = "";
                    //optionally you could delete the data from the rest of the fields.
                }
                else
                {
                    <p><span style="color:firebrick">Product updated.</span></p>
                }
            }
            catch (Exception ex)
            {

                <p><span style="color:firebrick">@ex.Message</span></p>
                productid = "";
            }
        }

    }
}
else //for IsPost during initialization
{
    //if this page is being shown for the "first time"
    //the page accesses the database for the current record
    //to display to the user
    queryProducts = db.QuerySingle(queryStatement, pid);

    //moving the current record data to the form controls
    //NEVER code to the data supplied
    //the Products table on the Northwind database does not
    //  have a record where the nullable fields are actual null
    //the following code takes into account fields which actually
    //  maybe null
    productid = queryProducts.ProductID.ToString();
    productname = queryProducts.ProductName;
    supplierid = queryProducts.SupplierID == null ? "0" : queryProducts.SupplierID.ToString();
    categoryid = queryProducts.CategoryID == null ? "0" : queryProducts.CategoryID.ToString();
    quantityperunit = queryProducts.QuantityPerUnit;
    unitprice = queryProducts.UnitPrice == null ? "" : queryProducts.UnitPrice.ToString();
    unitsinstock = queryProducts.UnitsInStock == null ? "" : queryProducts.UnitsInStock.ToString();
    unitsonorder = queryProducts.UnitsOnOrder == null ? "" : queryProducts.UnitsOnOrder.ToString();
    reorderlevel = queryProducts.ReorderLevel == null ? "" : queryProducts.ReorderLevel.ToString();
    discontinued = queryProducts.Discontinued.ToString();//from sql 0/1
}
<div class="form-group">

    <form id="theForm" action="" method="post">
        <div class="col-sm-6 text-right">
            <label id="ProductID">Product ID</label><br />
            <label id="ProductName">Product Name</label><br />
            <label id="SupplierList">Supplier</label><br />
            <label id="CategoryList">Category</label><br />
            <label id="QuantityPerUnit">Quantity Per Unit</label><br />
            <label id="UnitPrice">Unit Price</label><br />
            <label id="UnitsInStock">Units In Stock</label><br />
            <label id="UnitsOnOrder">Units On Order</label><br />
            <label id="ReorderLevel">ReorderLevel</label><br />
            <label id="Discontinued">Discontinued</label><br />
        </div>
        <div class="col-sm-6">
            <input type="text" name="ProductID" value="@productid" readonly /><br />
            <input type="text" name="ProductName" value="@productname" /><br />
            <select name="SupplierList">
                <option value="0">select...</option>
                @foreach (var acollectionrow in querySuppliers)
                {
                    if (acollectionrow.SupplierID.ToString() == supplierid)
                    {
                        <option value="@acollectionrow[0]" selected>@acollectionrow[1]</option>
                    }
                    else
                    {
                        <option value="@acollectionrow[0]">@acollectionrow[1]</option>
                    }
                }
            </select><br />
            <select name="CategoryList">
                <option value="0">select...</option>
                @foreach (var acollectionrow in queryCategories)
                {
                    if (acollectionrow.CategoryID.ToString() == categoryid)
                    {
                        <option value="@acollectionrow[0]" selected>@acollectionrow[1]</option>
                    }
                    else
                    {
                        <option value="@acollectionrow[0]">@acollectionrow[1]</option>
                    }
                }
            </select><br />
            <input type="text" name="QuantityPerUnit" value="@quantityperunit" /><br />
            <input type="number" name="UnitPrice" value="@unitprice" min="0.00" step="0.01" /><br />
            <input type="number" name="UnitsInStock" value="@unitsinstock" min="0" step="1" /><br />
            <input type="number" name="UnitsOnOrder" value="@unitsonorder" min="0" step="1" /><br />
            <input type="number" name="ReorderLevel" value="@reorderlevel" min="0" step="1" /><br />
            @if (discontinued.Equals("True") || (discontinued == "1"))
            {
                <input type="checkbox" name="Discontinued" checked value="1" /><br /><br />
            }
            else
            {
                <input type="checkbox" name="Discontinued" value="0" /><br /><br />
            }
        </div>
        <div class="row">
            <button type="submit" name="theButton" id="theUpdate" class="btn btn-primary" value="update">Update</button>&nbsp;&nbsp;&nbsp;
            <button type="submit" name="theButton" id="theDelete" class="btn btn-primary" value="delete">Delete</button>&nbsp;&nbsp;&nbsp;
            <button type="submit" name="theButton" id="theCancel" class="btn btn-primary" value="cancel">Cancel</button>
        </div>

    </form>
</div>
